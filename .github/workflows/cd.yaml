name: CD

on:
  workflow_run:
    workflows: [CI]
    types:
      - completed

jobs:
  Build_Backend:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: self-hosted
    outputs:
      backend_image: ${{ steps.set-backend-image.outputs.image }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: jouk2310
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push backend image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: Dockerfile.backend
          push: true
          tags: |
            jouk2310/weather-backend:latest
            jouk2310/weather-backend:${{ github.sha }}

      - name: Set backend image output
        id: set-backend-image
        run: echo "image=jouk2310/weather-backend:${{ github.sha }}" >> $GITHUB_OUTPUT

  Build_Frontend:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: self-hosted
    outputs:
      frontend_image: ${{ steps.set-frontend-image.outputs.image }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: jouk2310
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push frontend image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: Dockerfile.frontend
          push: true
          tags: |
            jouk2310/weather-frontend:latest
            jouk2310/weather-frontend:${{ github.sha }}

      - name: Set frontend image output
        id: set-frontend-image
        run: echo "image=jouk2310/weather-frontend:${{ github.sha }}" >> $GITHUB_OUTPUT

  Kubernetes_Deploy:
    needs: [Build_Backend, Build_Frontend]
    runs-on: self-hosted
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Write KUBECONFIG from secret
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.KUBECONFIG }}" > $HOME/.kube/config
          chmod 600 $HOME/.kube/config

      - name: Create API KEY secret
        run: |
          kubectl create secret generic my-app-secret \
          --from-literal=VITE_API_KEY="${{ secrets.OPENWEATHER_API_KEY }}" \
          -n default --dry-run=client -o yaml | kubectl apply -f -

      - name: Apply Kubernetes manifests
        run: |
          kubectl apply -f kubernetes/service-account.yaml
          kubectl apply -f kubernetes/role.yaml
          kubectl apply -f kubernetes/role-binding.yaml
          kubectl apply -f kubernetes/deployment.yaml
          kubectl apply -f kubernetes/ingress.yaml
          kubectl apply -f kubernetes/service-backend.yaml
          kubectl apply -f kubernetes/service-frontend.yaml

      - name: Update deployment images
        run: |
          BACKEND_IMAGE=${{ needs.Build_Backend.outputs.backend_image }}
          FRONTEND_IMAGE=${{ needs.Build_Frontend.outputs.frontend_image }}

          echo "Updating backend to $BACKEND_IMAGE"
          kubectl set image deployment/weather-backend backend=$BACKEND_IMAGE -n default

          echo "Updating frontend to $FRONTEND_IMAGE"
          kubectl set image deployment/weather-frontend frontend=$FRONTEND_IMAGE -n default

      - name: Wait for rollout
        run: |
          kubectl rollout status deployment/weather-backend -n default --timeout=180s
          kubectl rollout status deployment/weather-frontend -n default --timeout=180s

      - name: Show resources
        run: kubectl get pods,svc,ingress -n default -o wide

  Docker_Email_Notification:
    needs: [Build_Backend, Build_Frontend]
    runs-on: ubuntu-latest
    if: ${{ always() }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install nodemailer
        run: npm install nodemailer

      - name: Send Docker Build Email
        env:
          SMTP_USERNAME: ${{ secrets.SMTP_USERNAME }}
          SMTP_PASSWORD: ${{ secrets.SMTP_PASSWORD }}
          MAIL_TO: ${{ secrets.MAIL_TO }}
          DOCKER_IMAGE_BACKEND: ${{ needs.Build_Backend.outputs.backend_image }}
          DOCKER_IMAGE_FRONTEND: ${{ needs.Build_Frontend.outputs.frontend_image }}
          BUILD_STATUS: ${{ needs.Build_Backend.result }}
          GIT_SHA: ${{ github.sha }}
          RUN_ID: ${{ github.run_id }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_ACTOR: ${{ github.actor }}
        run: |
          if [ -z "$SMTP_PASSWORD" ]; then
            echo "::error::SMTP_PASSWORD secret is empty. Add Gmail App Password to repo secrets."
            exit 1
          fi

          cat > send-docker-email.cjs <<'CJSEOF'
          const nodemailer = require("nodemailer");

          (async () => {
            try {
              const SMTP_USERNAME = process.env.SMTP_USERNAME;
              const SMTP_PASSWORD = process.env.SMTP_PASSWORD;
              const MAIL_TO = process.env.MAIL_TO;
              const DOCKER_IMAGE = process.env.DOCKER_IMAGE;
              const BUILD_STATUS = process.env.BUILD_STATUS;
              const GIT_SHA = process.env.GIT_SHA;
              const GIT_REF = process.env.GIT_REF;
              const RUN_ID = process.env.RUN_ID;
              const GITHUB_REPOSITORY = process.env.GITHUB_REPOSITORY;
              const GITHUB_ACTOR = process.env.GITHUB_ACTOR;

              console.log("Email From:", SMTP_USERNAME);
              console.log("Email To:", MAIL_TO);
              console.log("Build Status:", BUILD_STATUS);
              console.log("Docker Image:", DOCKER_IMAGE);

              const transporter = nodemailer.createTransport({
                service: 'gmail',
                auth: {
                  user: SMTP_USERNAME,
                  pass: SMTP_PASSWORD
                }
              });

              await transporter.verify();
              console.log("✔ SMTP connection verified");

              const isSuccess = BUILD_STATUS === 'success';
              const statusText = isSuccess ? 'Build Successful' : 'Build Failed';
              const statusColor = isSuccess ? '#1f883d' : '#d1242f';
              const statusBg = isSuccess ? '#d1f5d3' : '#ffebe9';
              const statusEmoji = isSuccess ? '✅' : '❌';

              const htmlBody = `
                <!DOCTYPE html>
                <html>
                <head>
                    <meta charset="UTF-8">
                    <style>
                        body { 
                          font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; 
                          margin: 0; 
                          padding: 0; 
                          background-color: #f6f8fa; 
                        }
                        .container { 
                          max-width: 600px; 
                          margin: 0 auto; 
                          background: #ffffff; 
                          border: 1px solid #d1d9e0; 
                          border-radius: 6px; 
                        }
                        .header { 
                          background: ${statusColor}; 
                          color: white; 
                          padding: 20px; 
                          text-align: center; 
                        }
                        .header h1 { 
                          margin: 0; 
                          font-size: 20px; 
                          font-weight: 600; 
                        }
                        .content { 
                          padding: 24px; 
                        }
                        .status { 
                          background: ${statusBg}; 
                          color: ${statusColor}; 
                          padding: 8px 12px; 
                          border-radius: 6px; 
                          font-weight: 500; 
                          display: inline-block; 
                          margin-bottom: 16px; 
                        }
                        .info-table { 
                          width: 100%; 
                          border-collapse: collapse; 
                          margin: 16px 0; 
                        }
                        .info-table td { 
                          padding: 8px 0; 
                          border-bottom: 1px solid #eaecf0; 
                        }
                        .info-table td:first-child { 
                          font-weight: 500; 
                          width: 120px; 
                          color: #656d76; 
                        }
                        .info-table td:last-child { 
                          font-family: 'Monaco', 'Menlo', monospace; 
                          font-size: 12px; 
                        }
                        .docker-info { 
                          background: #f6f8fa; 
                          border: 1px solid #d1d9e0; 
                          border-radius: 6px; 
                          padding: 16px; 
                          margin: 16px 0; 
                        }
                        .tag { 
                          background: #0969da; 
                          color: white; 
                          padding: 4px 8px; 
                          border-radius: 12px; 
                          font-size: 12px; 
                          margin: 2px 4px 2px 0; 
                          display: inline-block; 
                          font-family: monospace;
                        }
                        .button { 
                          background: ${isSuccess ? '#1f883d' : '#d1242f'}; 
                          color: white; 
                          text-decoration: none; 
                          padding: 8px 16px; 
                          border-radius: 6px; 
                          font-weight: 500; 
                          margin: 8px 8px 0 0; 
                          display: inline-block; 
                        }
                        .footer { 
                          background: #f6f8fa; 
                          padding: 16px; 
                          text-align: center; 
                          font-size: 12px; 
                          color: #656d76; 
                          border-top: 1px solid #d1d9e0; 
                        }
                    </style>
                </head>
                <body>
                    <div class="container">
                        <div class="header">
                            <h1>${statusEmoji} Weather App Deployment</h1>
                            <p>Docker image ${isSuccess ? 'build completed successfully' : 'build failed'}</p>
                        </div>
                        <div class="content">
                            <div class="status">${statusEmoji} ${statusText}</div>
                            
                            <table class="info-table">
                                <tr>
                                    <td>Repository:</td>
                                    <td>${GITHUB_REPOSITORY}</td>
                                </tr>
                                <tr>
                                    <td>Author:</td>
                                    <td>${GITHUB_ACTOR}</td>
                                </tr>
                                <tr>
                                    <td>Commit:</td>
                                    <td>${GIT_SHA}</td>
                                </tr>
                                <tr>
                                    <td>Branch:</td>
                                    <td>${GIT_REF}</td>
                                </tr>
                                <tr>
                                    <td>Build Time:</td>
                                    <td>${new Date().toISOString()}</td>
                                </tr>
                            </table>
                            
                            ${isSuccess ? `
                            <div class="docker-info">
                                <strong>🐳 Docker Tags:</strong><br>
                                <span class="tag">jouk2310/weather-app:latest</span>
                                <span class="tag">${DOCKER_IMAGE}</span>
                            </div>
                            
                            <a href="https://hub.docker.com/r/jouk2310/weather-app" class="button">View on Docker Hub</a>
                            ` : ''}
                            
                            <a href="https://github.com/${GITHUB_REPOSITORY}/actions/runs/${RUN_ID}" class="button">View Build Logs</a>
                        </div>
                        <div class="footer">
                            Automated notification from GitHub Actions CI/CD<br>
                            Weather App © 2024
                        </div>
                    </div>
                </body>
                </html>
              `;

              const mailOptions = {
                from: `Weather App CI/CD <${SMTP_USERNAME}>`,
                to: MAIL_TO,
                subject: `${statusEmoji} Weather App - Docker ${statusText}`,
                html: htmlBody
              };

              const info = await transporter.sendMail(mailOptions);
              console.log("✅ Docker build email sent successfully:", info.messageId);

            } catch (error) {
              console.error("❌ Error sending Docker build email:", error);
              process.exit(1);
            }
          })();
          CJSEOF

          node send-docker-email.cjs

  Kubernetes_Email_Notification:
    needs: [Kubernetes_Deploy]
    runs-on: ubuntu-latest
    if: ${{ always() }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install nodemailer
        run: npm install nodemailer

      - name: Send Kubernetes Deployment Email
        env:
          SMTP_USERNAME: ${{ secrets.SMTP_USERNAME }}
          SMTP_PASSWORD: ${{ secrets.SMTP_PASSWORD }}
          MAIL_TO: ${{ secrets.MAIL_TO }}
          DEPLOYMENT_STATUS: ${{ needs.Kubernetes_Deploy.result }}
          GIT_SHA: ${{ github.sha }}
          RUN_ID: ${{ github.run_id }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_ACTOR: ${{ github.actor }}
        run: |
          cat > send-k8s-email.cjs <<'CJSEOF'
          const nodemailer = require("nodemailer");

          (async () => {
            try {
              const SMTP_USERNAME = process.env.SMTP_USERNAME;
              const SMTP_PASSWORD = process.env.SMTP_PASSWORD;
              const MAIL_TO = process.env.MAIL_TO;
              const DEPLOYMENT_STATUS = process.env.DEPLOYMENT_STATUS;
              const GIT_SHA = process.env.GIT_SHA;
              const RUN_ID = process.env.RUN_ID;
              const GITHUB_REPOSITORY = process.env.GITHUB_REPOSITORY;
              const GITHUB_ACTOR = process.env.GITHUB_ACTOR;

              console.log("Deployment Status:", DEPLOYMENT_STATUS);

              const transporter = nodemailer.createTransport({
                service: 'gmail',
                auth: {
                  user: SMTP_USERNAME,
                  pass: SMTP_PASSWORD
                }
              });

              await transporter.verify();
              console.log("✔ SMTP connection verified for K8s notification");

              const isSuccess = DEPLOYMENT_STATUS === 'success';
              const statusText = isSuccess ? 'Deployment Successful' : 'Deployment Failed';
              const statusColor = isSuccess ? '#1f883d' : '#d1242f';
              const statusBg = isSuccess ? '#d1f5d3' : '#ffebe9';
              const statusEmoji = isSuccess ? '🚀' : '❌';

              const htmlBody = `
                <!DOCTYPE html>
                <html>
                <head>
                    <meta charset="UTF-8">
                    <style>
                        body { 
                          font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; 
                          margin: 0; 
                          padding: 0; 
                          background-color: #f6f8fa; 
                        }
                        .container { 
                          max-width: 600px; 
                          margin: 0 auto; 
                          background: #ffffff; 
                          border: 1px solid #d1d9e0; 
                          border-radius: 6px; 
                        }
                        .header { 
                          background: ${statusColor}; 
                          color: white; 
                          padding: 20px; 
                          text-align: center; 
                        }
                        .header h1 { 
                          margin: 0; 
                          font-size: 20px; 
                          font-weight: 600; 
                        }
                        .content { 
                          padding: 24px; 
                        }
                        .status { 
                          background: ${statusBg}; 
                          color: ${statusColor}; 
                          padding: 8px 12px; 
                          border-radius: 6px; 
                          font-weight: 500; 
                          display: inline-block; 
                          margin-bottom: 16px; 
                        }
                        .footer { 
                          background: #f6f8fa; 
                          padding: 16px; 
                          text-align: center; 
                          font-size: 12px; 
                          color: #656d76; 
                          border-top: 1px solid #d1d9e0; 
                        }
                        .button { 
                          background: ${statusColor}; 
                          color: white; 
                          text-decoration: none; 
                          padding: 8px 16px; 
                          border-radius: 6px; 
                          font-weight: 500; 
                          display: inline-block; 
                        }
                    </style>
                </head>
                <body>
                    <div class="container">
                        <div class="header">
                            <h1>${statusEmoji} Weather App Kubernetes</h1>
                            <p>${isSuccess ? 'Successfully deployed to Kubernetes' : 'Deployment to Kubernetes failed'}</p>
                        </div>
                        <div class="content">
                            <div class="status">${statusEmoji} ${statusText}</div>
                            
                            <p><strong>Repository:</strong> ${GITHUB_REPOSITORY}</p>
                            <p><strong>Author:</strong> ${GITHUB_ACTOR}</p>
                            <p><strong>Commit:</strong> ${GIT_SHA}</p>
                            <p><strong>Docker Image:</strong> jouk2310/weather-app:latest</p>
                            <p><strong>Namespace:</strong> default</p>
                            <p><strong>Deployment Time:</strong> ${new Date().toISOString()}</p>
                            
                            <a href="https://github.com/${GITHUB_REPOSITORY}/actions/runs/${RUN_ID}" class="button">View Deployment Logs</a>
                        </div>
                        <div class="footer">
                            Automated notification from GitHub Actions CI/CD<br>
                            Weather App © 2024
                        </div>
                    </div>
                </body>
                </html>
              `;

              const mailOptions = {
                from: `Weather App CI/CD <${SMTP_USERNAME}>`,
                to: MAIL_TO,
                subject: `${statusEmoji} Weather App - Kubernetes ${statusText}`,
                html: htmlBody
              };

              const info = await transporter.sendMail(mailOptions);
              console.log("✅ Kubernetes deployment email sent successfully:", info.messageId);

            } catch (error) {
              console.error("❌ Error sending Kubernetes deployment email:", error);
              process.exit(1);
            }
          })();
          CJSEOF

          node send-k8s-email.cjs
