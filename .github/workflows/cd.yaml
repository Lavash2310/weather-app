name: CD

on:
  workflow_run:
    workflows: [CI]
    types:
      - completed

jobs:
  Docker:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: self-hosted
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: jouk2310
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: |
            jouk2310/weather-app:latest
            jouk2310/weather-app:${{ github.sha }}
          file: ./Dockerfile
          sbom: true

      - name: Set image output
        id: set-image
        run: |
          echo "image=jouk2310/weather-app:${{ github.sha }}" >> $GITHUB_OUTPUT

  Kubernetes_Deploy:
    needs: Docker
    runs-on: self-hosted
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Write KUBECONFIG from secret
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.KUBECONFIG }}" > $HOME/.kube/config
          chmod 600 $HOME/.kube/config

      - name: Apply Kubernetes manifests
        run: |
          kubectl apply -f kubernetes/service-account.yaml
          kubectl apply -f kubernetes/role.yaml
          kubectl apply -f kubernetes/role-binding.yaml
          kubectl apply -f kubernetes/hello-nginx.yaml
          kubectl apply -f kubernetes/nginx-service.yaml
          kubectl apply -f kubernetes/secrets.yaml
          kubectl apply -f kubernetes/deployment.yaml
          kubectl apply -f kubernetes/service.yaml

      - name: Update deployment image
        run: |
          IMAGE=jouk2310/weather-app:latest
          echo "Setting image to $IMAGE"
          kubectl set image deployment/my-app weather-app=$IMAGE -n default

      - name: Wait for rollout
        run: kubectl rollout status deployment/my-app -n default --timeout=180s

      - name: Show resources
        run: kubectl get pods,svc,ingress -n default -o wide

  Notify_Email:
    needs: Docker
    runs-on: ubuntu-latest
    if: ${{ always() }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install nodemailer
        run: npm install nodemailer

      - name: Create and run send-email.cjs (CommonJS) with debug
        env:
          SMTP_USER: ${{ secrets.EMAIL_USER || 'maksymromanyuk0@gmail.com' }}
          SMTP_PASS: ${{ secrets.SMTP_PASSWORD }}
          IMAGE: ${{ needs.Docker.outputs.image }}
          BUILD_STATUS: ${{ needs.Docker.result }}
          GIT_SHA: ${{ github.sha }}
          GIT_REF: ${{ github.ref }}
          RUN_ID: ${{ github.run_id }}
        run: |
          if [ -z "$SMTP_PASS" ]; then
            echo "::error::SMTP_PASSWORD secret is empty. Add App Password to repo secrets as SMTP_PASSWORD."
            exit 1
          fi

          cat > send-email.cjs <<'CJSEOF'
          const nodemailer = require("nodemailer");

          (async () => {
            try {
              const SMTP_USER = process.env.SMTP_USER;
              const SMTP_PASS = process.env.SMTP_PASS;
              const IMAGE = process.env.IMAGE || "unknown";
              const BUILD_STATUS = process.env.BUILD_STATUS || "unknown";
              const GIT_SHA = process.env.GIT_SHA || "unknown";
              const GIT_REF = process.env.GIT_REF || "unknown";
              const RUN_ID = process.env.RUN_ID || "unknown";

              console.log("SMTP_USER:", SMTP_USER ? SMTP_USER.replace(/(.{3}).+(@.+)/, "$1***$2") : "(missing)");
              console.log("IMAGE:", IMAGE);
              console.log("BUILD_STATUS:", BUILD_STATUS);

              const transporter = nodemailer.createTransport({
                host: "smtp.gmail.com",
                port: 587,
                secure: false,
                auth: { user: SMTP_USER, pass: SMTP_PASS },
                logger: true,
                debug: true
              });

              // verify connection configuration
              await new Promise((resolve, reject) => {
                transporter.verify((err, success) => {
                  if (err) {
                    console.error("✖ transporter.verify() failed:", err && err.message);
                    return reject(err);
                  }
                  console.log("✔ transporter.verify(): SMTP connection ok");
                  resolve(success);
                });
              });

              const htmlBody = `<!doctype html>
          <html>
          <head>
            <meta charset="utf-8">
            <meta name="viewport" content="width=device-width,initial-scale=1">
            <title>Docker image pushed</title>
            <style>
              body { font-family: Arial, sans-serif; background:#f4f6f8; margin:0; padding:20px; }
              .card { max-width:600px; margin:20px auto; background:#ffffff; border-radius:8px; box-shadow:0 2px 6px rgba(0,0,0,0.08); overflow:hidden; }
              .header { padding:20px; background:linear-gradient(90deg,#1f6feb,#3ec1ff); color:#fff; }
              .header h1 { margin:0; font-size:18px; }
              .content { padding:20px; color:#111; line-height:1.4; }
              .meta { font-size:13px; color:#6b7280; margin-bottom:12px; }
              .btn { display:inline-block; padding:10px 16px; background:#1f6feb; color:#fff; text-decoration:none; border-radius:6px; font-weight:600; }
              .footer { padding:16px 20px; font-size:12px; color:#8b95a5; background:#fbfdff; text-align:center; }
              .code { background:#f6f8fa; padding:8px 10px; border-radius:6px; font-family:monospace; font-size:13px; color:#0b1220; display:inline-block; }
            </style>
          </head>
          <body>
            <div class="card">
              <div class="header">
                <h1>Docker image built & pushed</h1>
              </div>
              <div class="content">
                <p class="meta">Build status: <strong>${BUILD_STATUS}</strong></p>
                <p>Привіт! Ваш Docker image був побудований (або спроба побудувати) та ось результат:</p>
                <p><strong>Image:</strong> <span class="code">${IMAGE}</span></p>
                <p><strong>Commit:</strong> <span class="code">${GIT_SHA}</span></p>
                <p><strong>Ref:</strong> <span class="code">${GIT_REF}</span></p>
                <p><a class="btn" href="https://hub.docker.com/r/jouk2310/weather-app" target="_blank" rel="noopener">Переглянути в Docker Hub</a></p>
                <hr style="border:none;border-top:1px solid #eef2f7;margin:18px 0;">
                <p style="margin:0;">Якщо потрібні додаткові деталі — перевір логи workflow у GitHub Actions.</p>
              </div>
              <div class="footer">CI System • GitHub Actions • Run: ${RUN_ID}</div>
            </div>
          </body>
          </html>`;

                        const mailOptions = {
                          from: `"GitHub Actions" <${SMTP_USER}>`,
                          to: SMTP_USER,
                          subject: `Docker image pushed: ${IMAGE}`,
                          html: htmlBody
                        };

                        transporter.sendMail(mailOptions, (err, info) => {
                          if (err) {
                            console.error("❌ sendMail error:", err && err.message);
                            if (err.response) console.error("SMTP response:", err.response.toString());
                            process.exit(1);
                          } else {
                            console.log("✅ Email sent:", info.response);
                          }
                        });
                      } catch (e) {
                        console.error("Unhandled error:", e && e.message);
                        if (e && e.stack) console.error(e.stack);
                        process.exit(1);
                      }
                    })();
          CJSEOF

                    node send-email.cjs
