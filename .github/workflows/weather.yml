name: Weather App

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]
  workflow_dispatch:

jobs:
  Build:
    runs-on: self-hosted
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Clean npm cache
        run: |
          npm cache clean --force
          npm cache verify

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install dependencies
        run: npm install

  SonarCloud:
    needs: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@v2
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          projectBaseDir: .
          args: >
            -Dsonar.organization=lavash2310
            -Dsonar.projectKey=weather-app
            -Dsonar.sources=.
            -Dsonar.host.url=https://sonarcloud.io
          waitForQualityGate: true

  DependencyCheck:
    needs: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: WeatherApp
          scan: .
          format: HTML
          args: >
            --disableOssIndex
            --enableRetired false

      - name: Upload Dependency Check Report
        uses: actions/upload-artifact@v4
        with:
          name: Depcheck report
          path: ${{ github.workspace }}/reports

  Test:
    needs: [SonarCloud, DependencyCheck]
    runs-on: self-hosted
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Install dependencies
        run: npm install

      - name: Run build
        run: npm run build

  Publish_Nexus:
    needs: Test
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: "18"
          registry-url: "http://localhost:8081/repository/my-library/"

      - name: Authenticate with Nexus
        run: echo "//localhost:8081/repository/my-library/:_authToken=${{ secrets.NPM_TOKEN }}" > .npmrc

      - name: Install dependencies
        run: npm ci

      - name: Publish package
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  Docker:
    needs: Publish_Nexus
    runs-on: self-hosted
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: jouk2310
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: |
            jouk2310/weather-app:latest
            jouk2310/weather-app:${{ github.sha }}
          file: ./Dockerfile
          sbom: true

  Kubernetes_Deploy:
    needs: Docker
    runs-on: self-hosted
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Write KUBECONFIG from secret
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.KUBECONFIG }}" > $HOME/.kube/config
          chmod 600 $HOME/.kube/config

      - name: Apply Kubernetes manifests
        run: |
          kubectl apply -f kubernetes/service-account.yaml
          kubectl apply -f kubernetes/role.yaml
          kubectl apply -f kubernetes/role-binding.yaml
          kubectl apply -f kubernetes/secrets.yaml
          kubectl apply -f kubernetes/deployment.yaml
          kubectl apply -f kubernetes/service.yaml
          kubectl apply -f kubernetes/ingress.yaml

      - name: Set image
        run: |
          IMAGE=jouk2310/weather-app:latest
          echo "Setting image to $IMAGE"
          kubectl set image deployment/weather-app weather-app=$IMAGE -n default

      - name: Wait rollout
        run: kubectl rollout status deployment/weather-app -n default --timeout=120s

      - name: Show resources
        run: kubectl get pods,svc,ingress -n default -o wide
