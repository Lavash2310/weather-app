name: Hourly Weather

on:
  schedule:
    - cron: "0 11 * * *"

jobs:
  Hourly_Weather:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install jq and curl
        run: |
          sudo apt-get update
          sudo apt-get install -y jq curl

      - name: Fetch weather from OpenWeatherMap
        id: get_weather
        env:
          OWM_KEY: ${{ secrets.WEATHER_API_KEY }}
          LOC: ${{ secrets.WEATHER_LOCATION || 'Kyiv,UA' }}
        run: |
          URL="https://api.openweathermap.org/data/2.5/weather?q=${LOC}&appid=$OWM_KEY&units=metric&lang=uk"
          echo "Calling: $URL"
          resp=$(curl -sS "$URL")
          echo "$resp" > weather.json

          temp=$(jq -r '.main.temp // ""' weather.json)
          feels=$(jq -r '.main.feels_like // ""' weather.json)
          desc=$(jq -r '.weather[0].description // ""' weather.json)
          humidity=$(jq -r '.main.humidity // ""' weather.json)
          wind=$(jq -r '.wind.speed // ""' weather.json)
          city=$(jq -r '.name // ""' weather.json)
          country=$(jq -r '.sys.country // ""' weather.json)
          pressure=$(jq -r '.main.pressure // ""' weather.json)
          visibility=$(jq -r '.visibility // ""' weather.json)
          icon=$(jq -r '.weather[0].icon // ""' weather.json)

          echo "temp=$temp" >> $GITHUB_OUTPUT
          echo "feels=$feels" >> $GITHUB_OUTPUT
          echo "desc=$desc" >> $GITHUB_OUTPUT
          echo "humidity=$humidity" >> $GITHUB_OUTPUT
          echo "wind=$wind" >> $GITHUB_OUTPUT
          echo "city=$city" >> $GITHUB_OUTPUT
          echo "country=$country" >> $GITHUB_OUTPUT
          echo "pressure=$pressure" >> $GITHUB_OUTPUT
          echo "visibility=$visibility" >> $GITHUB_OUTPUT
          echo "icon=$icon" >> $GITHUB_OUTPUT

      - name: Setup Node.js for weather email
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install nodemailer
        run: npm install nodemailer

      - name: Send weather email via Nodemailer
        env:
          SMTP_USERNAME: ${{ secrets.SMTP_USERNAME }}
          SMTP_PASSWORD: ${{ secrets.SMTP_PASSWORD }}
          MAIL_TO: ${{ secrets.MAIL_TO }}
          WEATHER_TEMP: ${{ steps.get_weather.outputs.temp }}
          WEATHER_FEELS: ${{ steps.get_weather.outputs.feels }}
          WEATHER_DESC: ${{ steps.get_weather.outputs.desc }}
          WEATHER_HUMIDITY: ${{ steps.get_weather.outputs.humidity }}
          WEATHER_WIND: ${{ steps.get_weather.outputs.wind }}
          WEATHER_CITY: ${{ steps.get_weather.outputs.city }}
          WEATHER_COUNTRY: ${{ steps.get_weather.outputs.country }}
          WEATHER_PRESSURE: ${{ steps.get_weather.outputs.pressure }}
          WEATHER_VISIBILITY: ${{ steps.get_weather.outputs.visibility }}
          WEATHER_ICON: ${{ steps.get_weather.outputs.icon }}
          RUN_ID: ${{ github.run_id }}
        run: |
          if [ -z "$SMTP_PASSWORD" ]; then
            echo "::error::SMTP_PASSWORD secret is empty. Add Gmail App Password to repo secrets."
            exit 1
          fi

          cat > send-weather-email.cjs <<'CJSEOF'
          const nodemailer = require("nodemailer");

          (async () => {
            try {
              const SMTP_USERNAME = process.env.SMTP_USERNAME;
              const SMTP_PASSWORD = process.env.SMTP_PASSWORD;
              const MAIL_TO = process.env.MAIL_TO;
              const WEATHER_TEMP = process.env.WEATHER_TEMP;
              const WEATHER_FEELS = process.env.WEATHER_FEELS;
              const WEATHER_DESC = process.env.WEATHER_DESC;
              const WEATHER_HUMIDITY = process.env.WEATHER_HUMIDITY;
              const WEATHER_WIND = process.env.WEATHER_WIND;
              const WEATHER_CITY = process.env.WEATHER_CITY;
              const WEATHER_COUNTRY = process.env.WEATHER_COUNTRY;
              const WEATHER_PRESSURE = process.env.WEATHER_PRESSURE;
              const WEATHER_VISIBILITY = process.env.WEATHER_VISIBILITY;
              const WEATHER_ICON = process.env.WEATHER_ICON;
              const RUN_ID = process.env.RUN_ID;

              console.log("Weather Email From:", SMTP_USERNAME);
              console.log("Weather Email To:", MAIL_TO);
              console.log("Weather for:", `${WEATHER_CITY}, ${WEATHER_COUNTRY}`);
              console.log("Temperature:", `${WEATHER_TEMP}°C`);

              const transporter = nodemailer.createTransporter({
                service: 'gmail',
                auth: {
                  user: SMTP_USERNAME,
                  pass: SMTP_PASSWORD
                }
              });

              await transporter.verify();
              console.log("✔ SMTP connection verified for weather email");

              function getWeatherEmoji(icon, description) {
                const iconMap = {
                  '01d': '☀️', '01n': '🌙',
                  '02d': '⛅', '02n': '☁️',
                  '03d': '☁️', '03n': '☁️',
                  '04d': '☁️', '04n': '☁️',
                  '09d': '🌧️', '09n': '🌧️',
                  '10d': '🌦️', '10n': '🌧️',
                  '11d': '⛈️', '11n': '⛈️',
                  '13d': '🌨️', '13n': '🌨️',
                  '50d': '🌫️', '50n': '🌫️'
                };
                return iconMap[icon] || '🌤️';
              }

              // Функція для визначення кольору температури
              function getTempColor(temp) {
                const t = parseFloat(temp);
                if (t >= 25) return '#e74c3c'; // Червоний (спекотно)
                if (t >= 15) return '#f39c12'; // Помаранчевий (тепло)
                if (t >= 5) return '#3498db';  // Синій (прохолодно)
                return '#9b59b6'; // Фіолетовий (холодно)
              }

              const currentTime = new Date().toLocaleString('uk-UA', {
                timeZone: 'Europe/Kiev',
                year: 'numeric',
                month: 'long',
                day: 'numeric',
                hour: '2-digit',
                minute: '2-digit'
              });

              const weatherEmoji = getWeatherEmoji(WEATHER_ICON, WEATHER_DESC);
              const tempColor = getTempColor(WEATHER_TEMP);

              const htmlBody = `
                <!DOCTYPE html>
                <html>
                <head>
                    <meta charset="UTF-8">
                    <meta name="viewport" content="width=device-width,initial-scale=1">
                    <title>Погода — ${WEATHER_CITY}</title>
                    <style>
                        body { 
                          font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; 
                          margin: 0; 
                          padding: 0; 
                          background-color: #f6f8fa; 
                        }
                        .container { 
                          max-width: 600px; 
                          margin: 0 auto; 
                          background: #ffffff; 
                          border: 1px solid #d1d9e0; 
                          border-radius: 6px; 
                        }
                        .header { 
                          background: linear-gradient(90deg, #1f6feb, #3ec1ff); 
                          color: white; 
                          padding: 20px; 
                          text-align: center; 
                        }
                        .header h1 { 
                          margin: 0; 
                          font-size: 20px; 
                          font-weight: 600; 
                        }
                        .weather-main {
                          text-align: center;
                          padding: 30px 20px;
                          background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                          color: white;
                        }
                        .weather-icon {
                          font-size: 60px;
                          margin-bottom: 10px;
                        }
                        .temp-main {
                          font-size: 48px;
                          font-weight: bold;
                          margin: 10px 0;
                          color: ${tempColor};
                          text-shadow: 2px 2px 4px rgba(0,0,0,0.1);
                        }
                        .weather-desc {
                          font-size: 18px;
                          margin-bottom: 20px;
                          text-transform: capitalize;
                        }
                        .content { 
                          padding: 24px; 
                        }
                        .weather-grid {
                          display: grid;
                          grid-template-columns: repeat(2, 1fr);
                          gap: 16px;
                          margin: 20px 0;
                        }
                        .weather-item {
                          background: #f6f8fa;
                          padding: 16px;
                          border-radius: 6px;
                          border: 1px solid #d1d9e0;
                          text-align: center;
                        }
                        .weather-item-label {
                          font-size: 12px;
                          color: #656d76;
                          font-weight: 500;
                          margin-bottom: 8px;
                          text-transform: uppercase;
                        }
                        .weather-item-value {
                          font-size: 24px;
                          font-weight: bold;
                          color: #24292f;
                          font-family: 'Monaco', 'Menlo', monospace;
                        }
                        .location-info {
                          background: #e3f2fd;
                          border: 1px solid #2196F3;
                          border-radius: 6px;
                          padding: 16px;
                          margin: 20px 0;
                          text-align: center;
                        }
                        .location-info strong {
                          color: #1976D2;
                          font-size: 18px;
                        }
                        .time-info {
                          color: #656d76;
                          font-size: 14px;
                          margin-top: 20px;
                          padding: 16px;
                          background: #f6f8fa;
                          border-radius: 6px;
                          text-align: center;
                        }
                        .footer { 
                          background: #f6f8fa; 
                          padding: 16px; 
                          text-align: center; 
                          font-size: 12px; 
                          color: #656d76; 
                          border-top: 1px solid #d1d9e0; 
                        }
                        @media (max-width: 480px) {
                          .weather-grid {
                            grid-template-columns: 1fr;
                          }
                        }
                    </style>
                </head>
                <body>
                    <div class="container">
                        <div class="header">
                            <h1>🌤️ Щогодинна погода</h1>
                        </div>
                        
                        <div class="weather-main">
                            <div class="weather-icon">${weatherEmoji}</div>
                            <div class="temp-main">${WEATHER_TEMP}°C</div>
                            <div class="weather-desc">${WEATHER_DESC}</div>
                        </div>
                        
                        <div class="content">
                            <div class="location-info">
                                <strong>📍 ${WEATHER_CITY}, ${WEATHER_COUNTRY}</strong>
                            </div>
                            
                            <div class="weather-grid">
                                <div class="weather-item">
                                    <div class="weather-item-label">🌡️ Відчувається</div>
                                    <div class="weather-item-value">${WEATHER_FEELS}°C</div>
                                </div>
                                <div class="weather-item">
                                    <div class="weather-item-label">💧 Вологість</div>
                                    <div class="weather-item-value">${WEATHER_HUMIDITY}%</div>
                                </div>
                                <div class="weather-item">
                                    <div class="weather-item-label">💨 Вітер</div>
                                    <div class="weather-item-value">${WEATHER_WIND} м/с</div>
                                </div>
                                <div class="weather-item">
                                    <div class="weather-item-label">🌊 Тиск</div>
                                    <div class="weather-item-value">${WEATHER_PRESSURE} гПа</div>
                                </div>
                            </div>

                            ${WEATHER_VISIBILITY && WEATHER_VISIBILITY !== 'null' ? `
                            <div style="background: #fff3cd; border: 1px solid #ffc107; border-radius: 6px; padding: 16px; margin: 16px 0; text-align: center;">
                                <strong>👁️ Видимість:</strong> ${Math.round(WEATHER_VISIBILITY / 1000)} км
                            </div>
                            ` : ''}
                            
                            <div class="time-info">
                                <strong>⏰ Оновлено:</strong> ${currentTime}
                            </div>
                        </div>
                        
                        <div class="footer">
                            Автоматичне щогодинне повідомлення від GitHub Actions<br>
                            Джерело: OpenWeatherMap • Run ${RUN_ID}
                        </div>
                    </div>
                </body>
                </html>
              `;

              const mailOptions = {
                from: `Weather App <${SMTP_USERNAME}>`,
                to: MAIL_TO,
                subject: `${weatherEmoji} Погода — ${WEATHER_CITY}, ${WEATHER_COUNTRY} — ${WEATHER_TEMP}°C`,
                html: htmlBody
              };

              const info = await transporter.sendMail(mailOptions);
              console.log("✅ Weather email sent successfully:", info.messageId);

            } catch (error) {
              console.error("❌ Error sending weather email:", error);
              process.exit(1);
            }
          })();
          CJSEOF

          node send-weather-email.cjs
