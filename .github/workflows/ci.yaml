name: CI

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]
  workflow_dispatch:
  schedule:
    - cron: "0 12 * * *"

jobs:
  Build:
    runs-on: self-hosted
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Clean npm cache
        run: |
          npm cache clean --force
          npm cache verify

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install dependencies
        run: npm install

  SonarCloud:
    needs: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@v2
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          projectBaseDir: .
          args: >
            -Dsonar.organization=lavash2310
            -Dsonar.projectKey=weather-app
            -Dsonar.sources=.
            -Dsonar.host.url=https://sonarcloud.io
          waitForQualityGate: true

  DependencyCheck:
    needs: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: WeatherApp
          scan: .
          format: HTML
          args: >
            --disableOssIndex
            --enableRetired false

      - name: Upload Dependency Check Report
        uses: actions/upload-artifact@v4
        with:
          name: Depcheck report
          path: ${{ github.workspace }}/reports

  Test:
    needs: [SonarCloud, DependencyCheck]
    runs-on: self-hosted
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Install dependencies
        run: npm install

      - name: Run build
        run: npm run build

  Publish_Nexus:
    needs: Test
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: "18"
          registry-url: "http://localhost:8081/repository/my-library/"

      - name: Authenticate with Nexus
        run: echo "//localhost:8081/repository/my-library/:_authToken=${{ secrets.NPM_TOKEN }}" > .npmrc

      - name: Install dependencies
        run: npm ci

      - name: Publish package
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
<<<<<<< HEAD:.github/workflows/ci.yaml
=======

  Docker:
    needs: Publish_Nexus
    runs-on: self-hosted
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: jouk2310
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: |
            jouk2310/weather-app:latest
            jouk2310/weather-app:${{ github.sha }}
          file: ./Dockerfile
          sbom: true

      - name: Set image output
        id: set-image
        run: |
          echo "image=jouk2310/weather-app:${{ github.sha }}" >> $GITHUB_OUTPUT

  Kubernetes_Deploy:
    needs: Docker
    runs-on: self-hosted
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Write KUBECONFIG from secret
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.KUBECONFIG }}" > $HOME/.kube/config
          chmod 600 $HOME/.kube/config

      - name: Apply Kubernetes manifests
        run: |
          kubectl apply -f kubernetes/service-account.yaml
          kubectl apply -f kubernetes/role.yaml
          kubectl apply -f kubernetes/role-binding.yaml
          kubectl apply -f kubernetes/hello-nginx.yaml
          kubectl apply -f kubernetes/nginx-service.yaml
          kubectl apply -f kubernetes/secrets.yaml
          kubectl apply -f kubernetes/deployment.yaml
          kubectl apply -f kubernetes/service.yaml

      - name: Update deployment image
        run: |
          IMAGE=jouk2310/weather-app:latest
          echo "Setting image to $IMAGE"
          kubectl set image deployment/my-app weather-app=$IMAGE -n default

      - name: Wait for rollout
        run: kubectl rollout status deployment/my-app -n default --timeout=180s

      - name: Show resources
        run: kubectl get pods,svc,ingress -n default -o wide

  Notify_Email:
    needs: Docker
    runs-on: ubuntu-latest
    if: ${{ always() }}
    steps:
      - name: Send HTML email
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 587
          username: maksymromanyuk0@gmail.com
          password: ${{ secrets.SMTP_PASSWORD }}
          subject: "Docker image pushed: ${{ needs.Docker.outputs.image }}"
          to: maksymromanyuk0@gmail.com
          from: maksymromanyuk0@gmail.com
          content_type: text/html
          body: |
            <!doctype html>
            <html>
            <head>
              <meta charset="utf-8">
              <meta name="viewport" content="width=device-width,initial-scale=1">
              <title>Docker image pushed</title>
              <style>
                body { font-family: Arial, sans-serif; background:#f4f6f8; margin:0; padding:20px; }
                .card { max-width:600px; margin:20px auto; background:#ffffff; border-radius:8px; box-shadow:0 2px 6px rgba(0,0,0,0.08); overflow:hidden; }
                .header { padding:20px; background:linear-gradient(90deg,#1f6feb,#3ec1ff); color:#fff; }
                .header h1 { margin:0; font-size:18px; }
                .content { padding:20px; color:#111; line-height:1.4; }
                .meta { font-size:13px; color:#6b7280; margin-bottom:12px; }
                .btn { display:inline-block; padding:10px 16px; background:#1f6feb; color:#fff; text-decoration:none; border-radius:6px; font-weight:600; }
                .footer { padding:16px 20px; font-size:12px; color:#8b95a5; background:#fbfdff; text-align:center; }
                .code { background:#f6f8fa; padding:8px 10px; border-radius:6px; font-family:monospace; font-size:13px; color:#0b1220; display:inline-block; }
                @media only screen and (max-width:480px) {
                  .card { margin:10px; }
                  .header h1 { font-size:16px; }
                }
              </style>
            </head>
            <body>
              <div class="card">
                <div class="header">
                  <h1>Docker image built & pushed</h1>
                </div>
                <div class="content">
                  <p class="meta">Build status: <strong>${{ job.status }}</strong></p>

                  <p>Привіт! Ваш Docker image був побудований (або спроба побудувати) та ось результат:</p>

                  <p>
                    <strong>Image:</strong>
                    <span class="code">${{ needs.Docker.outputs.image }}</span>
                  </p>

                  <p>
                    <strong>Commit:</strong>
                    <span class="code">${{ github.sha }}</span>
                  </p>

                  <p>
                    <strong>Ref:</strong> <span class="code">${{ github.ref }}</span>
                  </p>

                  <p>
                    <a class="btn" href="https://hub.docker.com/r/jouk2310/weather-app" target="_blank" rel="noopener">Переглянути в Docker Hub</a>
                  </p>

                  <hr style="border:none;border-top:1px solid #eef2f7;margin:18px 0;">

                  <p style="margin:0;">
                    Якщо потрібні додаткові деталі — перевір логи workflow у GitHub Actions.
                  </p>
                </div>

                <div class="footer">
                  CI System • GitHub Actions • Run: ${{ github.run_id }}
                </div>
              </div>
            </body>
            </html>

  Hourly_Weather:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install jq and curl
        run: |
          sudo apt-get update
          sudo apt-get install -y jq curl

      - name: Fetch weather from OpenWeatherMap
        id: get_weather
        env:
          OWM_KEY: ${{ secrets.WEATHER_API_KEY }}
          LOC: ${{ secrets.WEATHER_LOCATION || 'Kyiv,UA' }}
        run: |
          URL="https://api.openweathermap.org/data/2.5/weather?q=${LOC}&appid=$OWM_KEY&units=metric&lang=uk"
          echo "Calling: $URL"
          resp=$(curl -sS "$URL")
          echo "$resp" > weather.json

          temp=$(jq -r '.main.temp // ""' weather.json)
          feels=$(jq -r '.main.feels_like // ""' weather.json)
          desc=$(jq -r '.weather[0].description // ""' weather.json)
          humidity=$(jq -r '.main.humidity // ""' weather.json)
          wind=$(jq -r '.wind.speed // ""' weather.json)
          city=$(jq -r '.name // ""' weather.json)
          country=$(jq -r '.sys.country // ""' weather.json)

          echo "temp=$temp" >> $GITHUB_OUTPUT
          echo "feels=$feels" >> $GITHUB_OUTPUT
          echo "desc=$desc" >> $GITHUB_OUTPUT
          echo "humidity=$humidity" >> $GITHUB_OUTPUT
          echo "wind=$wind" >> $GITHUB_OUTPUT
          echo "city=$city" >> $GITHUB_OUTPUT
          echo "country=$country" >> $GITHUB_OUTPUT

      - name: Send weather email
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 587
          username: maksymromanyuk0@gmail.com
          password: ${{ secrets.SMTP_PASSWORD }}
          subject: "Погода — ${{ steps.get_weather.outputs.city }}, ${{ steps.get_weather.outputs.country }} — ${{ steps.get_weather.outputs.temp }}°C"
          to: maksymromanyuk0@gmail.com
          from: maksymromanyuk0@gmail.com
          content_type: text/html
          body: |
            <!doctype html>
            <html>
            <head>
              <meta charset="utf-8">
              <meta name="viewport" content="width=device-width,initial-scale=1">
              <title>Погода — ${{ steps.get_weather.outputs.city }}</title>
              <style>
                body { font-family: Arial, sans-serif; background:#f4f6f8; margin:0; padding:20px; }
                .card { max-width:600px; margin:20px auto; background:#fff; border-radius:8px; box-shadow:0 2px 6px rgba(0,0,0,0.08); overflow:hidden;}
                .header { padding:16px; background:linear-gradient(90deg,#1f6feb,#3ec1ff); color:#fff; }
                .header h1 { margin:0; font-size:18px; }
                .content { padding:18px; color:#111; line-height:1.4; }
                .metric { font-family:monospace; display:inline-block; padding:6px 10px; background:#f6f8fa; border-radius:6px; }
                .footer { padding:12px 16px; font-size:12px; color:#8b95a5; background:#fbfdff; text-align:center; }
              </style>
            </head>
            <body>
              <div class="card">
                <div class="header">
                  <h1>Погода — ${{ steps.get_weather.outputs.city }}, ${{ steps.get_weather.outputs.country }}</h1>
                </div>
                <div class="content">
                  <p><strong>Опис:</strong> ${{ steps.get_weather.outputs.desc }}</p>
                  <p><strong>Температура:</strong> <span class="metric">${{ steps.get_weather.outputs.temp }} °C</span></p>
                  <p><strong>Відчувається як:</strong> <span class="metric">${{ steps.get_weather.outputs.feels }} °C</span></p>
                  <p><strong>Вологість:</strong> <span class="metric">${{ steps.get_weather.outputs.humidity }}%</span></p>
                  <p><strong>Швидкість вітру:</strong> <span class="metric">${{ steps.get_weather.outputs.wind }} m/s</span></p>
                  <hr>
                  <p style="margin:0;">Це автоматичне щогодинне повідомлення. Джерело: OpenWeatherMap.</p>
                </div>
                <div class="footer">
                  GitHub Actions • Run ${{ github.run_id }}
                </div>
              </div>
            </body>
            </html>
>>>>>>> 566e9b6f9667fe2172c10151be3807d06fbb70fe:.github/workflows/weather.yml
